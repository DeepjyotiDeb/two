// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider = "mongodb"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  userType      UserType        @default(OTHER)
  password      String?
  salt          String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
  commentThread CommentThread[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  body          String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  userId        String
  user          User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments      Comment[]
  categories    CategoryOnPost[]
  commentThread CommentThread[]

  @@fulltext([title, body])
}

model Category {
  id    String           @id @default(auto()) @map("_id") @db.ObjectId
  name  String           @unique
  posts CategoryOnPost[]
}

model CategoryOnPost {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  postId       String
  post         Post?     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryName String
  category     Category? @relation(fields: [categoryName], references: [name], onDelete: Cascade, onUpdate: Cascade)
}

//cascade delete - deleting parent-[] deletes object(relation)
//when user is deleted, do not delete the user's post?
//when post is deleted, remove its comments as well
model Comment {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime        @default(now())
  body          String
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade) //if user is deleted, dont delete comment?
  postId        String
  post          Post?           @relation(fields: [postId], references: [id], onDelete: Cascade)
  commentThread CommentThread[]
}

model CommentThread {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime @default(now())
  body            String
  userId          String
  user            User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentCommentId String
  comment         Comment? @relation(fields: [parentCommentId], references: [id], onDelete: Cascade)
  postId          String
  post            Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
}

enum UserType {
  OTHER
  LOCAL
}
